{"ast":null,"code":"var _jsxFileName = \"/app/src/ResultsPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-okaidia.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ResultsPage({\n  prompt\n}) {\n  _s();\n  const [generatedHTML, setGeneratedHTML] = useState('');\n  const [generatedCSS, setGeneratedCSS] = useState('');\n  const [generatedJS, setGeneratedJS] = useState('');\n  const [selectedCodeType, setSelectedCodeType] = useState('html');\n  const [loading, setLoading] = useState(false);\n\n  // Function to fetch generated code from the backend\n  const fetchGeneratedCode = async prompt => {\n    setLoading(true);\n    try {\n      const response = await axios.post('http://localhost:5001/api/generate-code', {\n        prompt: prompt\n      });\n      const generatedText = response.data.generatedText;\n\n      // Parse the generatedText to separate HTML, CSS, and JS\n      const htmlMatch = generatedText.match(/<html>[\\s\\S]*<\\/html>/);\n      const cssMatch = generatedText.match(/<style>[\\s\\S]*<\\/style>/);\n      const jsMatch = generatedText.match(/<script>[\\s\\S]*<\\/script>/);\n      setGeneratedHTML(htmlMatch ? htmlMatch[0] : ''); // Extract HTML code\n      setGeneratedCSS(cssMatch ? cssMatch[0] : ''); // Extract CSS code\n      setGeneratedJS(jsMatch ? jsMatch[0] : ''); // Extract JS code\n\n      Prism.highlightAll(); // Apply syntax highlighting after the code is set\n    } catch (error) {\n      console.error('Error fetching code from backend:', error);\n    }\n    setLoading(false);\n  };\n  useEffect(() => {\n    // Call the backend when the component mounts or when the prompt changes\n    fetchGeneratedCode(prompt);\n  }, [prompt]);\n  const handleToggle = codeType => {\n    setSelectedCodeType(codeType);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/logo-no-background.png\",\n        alt: \"Logo\",\n        className: \"logo-top-left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"toggle-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `toggle-button ${selectedCodeType === 'html' ? 'active' : ''}`,\n            onClick: () => handleToggle('html'),\n            children: \"HTML\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `toggle-button ${selectedCodeType === 'css' ? 'active' : ''}`,\n            onClick: () => handleToggle('css'),\n            children: \"CSS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `toggle-button ${selectedCodeType === 'js' ? 'active' : ''}`,\n            onClick: () => handleToggle('js'),\n            children: \"JS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"code-container\",\n          children: [selectedCodeType === 'html' && /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              className: \"language-html\",\n              children: generatedHTML\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), selectedCodeType === 'css' && /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              className: \"language-css\",\n              children: generatedCSS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this), selectedCodeType === 'js' && /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              className: \"language-javascript\",\n              children: generatedJS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(ResultsPage, \"hwXKrPeaok+N8ZIAXGsL2AkAWz4=\");\n_c = ResultsPage;\nexport default ResultsPage;\nvar _c;\n$RefreshReg$(_c, \"ResultsPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","Prism","jsxDEV","_jsxDEV","Fragment","_Fragment","ResultsPage","prompt","_s","generatedHTML","setGeneratedHTML","generatedCSS","setGeneratedCSS","generatedJS","setGeneratedJS","selectedCodeType","setSelectedCodeType","loading","setLoading","fetchGeneratedCode","response","post","generatedText","data","htmlMatch","match","cssMatch","jsMatch","highlightAll","error","console","handleToggle","codeType","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/app/src/ResultsPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Prism from 'prismjs';\nimport 'prismjs/themes/prism-okaidia.css';\nimport './App.css';\n\nfunction ResultsPage({ prompt }) {\n  const [generatedHTML, setGeneratedHTML] = useState('');\n  const [generatedCSS, setGeneratedCSS] = useState('');\n  const [generatedJS, setGeneratedJS] = useState('');\n  const [selectedCodeType, setSelectedCodeType] = useState('html');\n  const [loading, setLoading] = useState(false);\n\n  // Function to fetch generated code from the backend\n  const fetchGeneratedCode = async (prompt) => {\n    setLoading(true);\n\n    try {\n      const response = await axios.post('http://localhost:5001/api/generate-code', {\n        prompt: prompt\n      });\n\n      const generatedText = response.data.generatedText;\n\n      // Parse the generatedText to separate HTML, CSS, and JS\n      const htmlMatch = generatedText.match(/<html>[\\s\\S]*<\\/html>/);\n      const cssMatch = generatedText.match(/<style>[\\s\\S]*<\\/style>/);\n      const jsMatch = generatedText.match(/<script>[\\s\\S]*<\\/script>/);\n\n      setGeneratedHTML(htmlMatch ? htmlMatch[0] : '');  // Extract HTML code\n      setGeneratedCSS(cssMatch ? cssMatch[0] : '');     // Extract CSS code\n      setGeneratedJS(jsMatch ? jsMatch[0] : '');        // Extract JS code\n\n      Prism.highlightAll(); // Apply syntax highlighting after the code is set\n    } catch (error) {\n      console.error('Error fetching code from backend:', error);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    // Call the backend when the component mounts or when the prompt changes\n    fetchGeneratedCode(prompt);\n  }, [prompt]);\n\n  const handleToggle = (codeType) => {\n    setSelectedCodeType(codeType);\n  };\n\n  return (\n    <div className=\"container\">\n      <header>\n        <img src=\"/logo-no-background.png\" alt=\"Logo\" className=\"logo-top-left\" />\n      </header>\n\n      <main>\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <>\n            <div className=\"toggle-buttons\">\n              <button\n                className={`toggle-button ${selectedCodeType === 'html' ? 'active' : ''}`}\n                onClick={() => handleToggle('html')}\n              >\n                HTML\n              </button>\n              <button\n                className={`toggle-button ${selectedCodeType === 'css' ? 'active' : ''}`}\n                onClick={() => handleToggle('css')}\n              >\n                CSS\n              </button>\n              <button\n                className={`toggle-button ${selectedCodeType === 'js' ? 'active' : ''}`}\n                onClick={() => handleToggle('js')}\n              >\n                JS\n              </button>\n            </div>\n\n            <div className=\"code-container\">\n              {selectedCodeType === 'html' && (\n                <pre>\n                  <code className=\"language-html\">{generatedHTML}</code>\n                </pre>\n              )}\n              {selectedCodeType === 'css' && (\n                <pre>\n                  <code className=\"language-css\">{generatedCSS}</code>\n                </pre>\n              )}\n              {selectedCodeType === 'js' && (\n                <pre>\n                  <code className=\"language-javascript\">{generatedJS}</code>\n                </pre>\n              )}\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default ResultsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,kCAAkC;AACzC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,WAAWA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC/B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAC,MAAM,CAAC;EAChE,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,MAAMqB,kBAAkB,GAAG,MAAOZ,MAAM,IAAK;IAC3CW,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAC,yCAAyC,EAAE;QAC3Ed,MAAM,EAAEA;MACV,CAAC,CAAC;MAEF,MAAMe,aAAa,GAAGF,QAAQ,CAACG,IAAI,CAACD,aAAa;;MAEjD;MACA,MAAME,SAAS,GAAGF,aAAa,CAACG,KAAK,CAAC,uBAAuB,CAAC;MAC9D,MAAMC,QAAQ,GAAGJ,aAAa,CAACG,KAAK,CAAC,yBAAyB,CAAC;MAC/D,MAAME,OAAO,GAAGL,aAAa,CAACG,KAAK,CAAC,2BAA2B,CAAC;MAEhEf,gBAAgB,CAACc,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAE;MAClDZ,eAAe,CAACc,QAAQ,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAK;MAClDZ,cAAc,CAACa,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAQ;;MAElD1B,KAAK,CAAC2B,YAAY,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;IAEAX,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd;IACAoB,kBAAkB,CAACZ,MAAM,CAAC;EAC5B,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,MAAMwB,YAAY,GAAIC,QAAQ,IAAK;IACjChB,mBAAmB,CAACgB,QAAQ,CAAC;EAC/B,CAAC;EAED,oBACE7B,OAAA;IAAK8B,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB/B,OAAA;MAAA+B,QAAA,eACE/B,OAAA;QAAKgC,GAAG,EAAC,yBAAyB;QAACC,GAAG,EAAC,MAAM;QAACH,SAAS,EAAC;MAAe;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC,eAETrC,OAAA;MAAA+B,QAAA,EACGjB,OAAO,gBACNd,OAAA;QAAA+B,QAAA,EAAK;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,gBAErBrC,OAAA,CAAAE,SAAA;QAAA6B,QAAA,gBACE/B,OAAA;UAAK8B,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B/B,OAAA;YACE8B,SAAS,EAAE,iBAAiBlB,gBAAgB,KAAK,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAG;YAC1E0B,OAAO,EAAEA,CAAA,KAAMV,YAAY,CAAC,MAAM,CAAE;YAAAG,QAAA,EACrC;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTrC,OAAA;YACE8B,SAAS,EAAE,iBAAiBlB,gBAAgB,KAAK,KAAK,GAAG,QAAQ,GAAG,EAAE,EAAG;YACzE0B,OAAO,EAAEA,CAAA,KAAMV,YAAY,CAAC,KAAK,CAAE;YAAAG,QAAA,EACpC;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTrC,OAAA;YACE8B,SAAS,EAAE,iBAAiBlB,gBAAgB,KAAK,IAAI,GAAG,QAAQ,GAAG,EAAE,EAAG;YACxE0B,OAAO,EAAEA,CAAA,KAAMV,YAAY,CAAC,IAAI,CAAE;YAAAG,QAAA,EACnC;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENrC,OAAA;UAAK8B,SAAS,EAAC,gBAAgB;UAAAC,QAAA,GAC5BnB,gBAAgB,KAAK,MAAM,iBAC1BZ,OAAA;YAAA+B,QAAA,eACE/B,OAAA;cAAM8B,SAAS,EAAC,eAAe;cAAAC,QAAA,EAAEzB;YAAa;cAAA4B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CACN,EACAzB,gBAAgB,KAAK,KAAK,iBACzBZ,OAAA;YAAA+B,QAAA,eACE/B,OAAA;cAAM8B,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAEvB;YAAY;cAAA0B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD,CACN,EACAzB,gBAAgB,KAAK,IAAI,iBACxBZ,OAAA;YAAA+B,QAAA,eACE/B,OAAA;cAAM8B,SAAS,EAAC,qBAAqB;cAAAC,QAAA,EAAErB;YAAW;cAAAwB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvD,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA,eACN;IACH;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAChC,EAAA,CAlGQF,WAAW;AAAAoC,EAAA,GAAXpC,WAAW;AAoGpB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}